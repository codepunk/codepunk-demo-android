TODO NEXT:
Address all TODO synchronized
Only fling when fling enabled
Only scroll when scroll enabled
Only scale when pinch-to-zoom enabled
Test to see if image is at "baseline" before saving/restoring on config change

In InteractiveImageView:
Clean up setLayoutInternal, combine with onScroll etc.

In InteractiveImageViewControlsFragment:
Save/restore state of scale, center, etc. <-- looking good for now
Research: Does ImageView remember Matrix values after configuration change?

TODO:
Edge Effects !!
Double-tap to zoom
Play with cropToPadding, see how it behaves. (Like "viewport" in my original concept?)


Version 6?

Ooooook ...
Make a private setLayoutInternal that simply adjusts the matrix. No adjustments.
Make a public setLayout that takes (sx, sy, cx, cy, animate) as arguments.
Make a nested ScaleScroller class that works like Scroller.
Both mOverScroller and mScaleScroller are always implemented.
Make a protected setLayout that takes (sx, sy, cx, cy, fromUser, animate) and resolves using fromUser
    before calling private setLayoutInternal.

TODO VERSION6 :
TODO NEXT So close!
I can't really animate based on scale and translate.
What I need to do is:
resolve target scale
resolve center point based on target scale.
Then ScaleScroller needs to animate on scaleX/Y and CENTER X/Y. (Currently it's doing Tx/Ty.
Because, during the animation, centerX/Y needs to move over smoothly but we also need to know the
farthest it can go.


x Next: A method to clamp sx, sy, cx, cy
x Code the ScaleScroller
x Then computeScroll
Then fix gestures -- everything but double tap (see TODO NEXT above)
Edge effects
Make sure I'm checking all flags for scroll, fling, doubletap etc. and doing all synchronized where appropriate

Also I kind of want to clean up how I'm throwing around mImageMatrix, mNewImageMatrix, mMatrixValues, mSrcRect & mDstRect etc.
